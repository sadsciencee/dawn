{%- liquid
    # not 100% sure but i think this was a copy paste taht should get deleted

    # params:
    #   collect_logs (boolean, optional)
    #   soft_cart_threshold: (boolean, default false)
    # check the active offers in the store, sort by priority and return the handle and type of the first active offer
    # returns as type:handle:log_lines string. if type/handle are not found, each will be _not_found_, but logs will still be included
    # refer to 'display-log-lines' snippet for log line formatting instructions

    # always use double colons to avoid conflicts
    assign result_delimiter = '::'
    assign list_delimiter = ':::'
    assign log_delimiter = '___LOG___'
    assign not_found_result = '_not_found_'
    # set 'soft_cart_threshold' to true if you want to retrieve the first *possible* offer - this can be used to present a "spend x to get y" message for the next valid offer
    assign soft_cart_threshold = soft_cart_threshold | default: false
    assign include_claimed_offers = include_claimed_offers | default: false

    # default result
    assign results = ''
    # default log lines
    assign log_lines = ''
    # default collect_logs
    assign collect_logs = collect_logs | default: false

    if collect_logs
        assign log_lines = '_title_Config Details' | append: log_delimiter | append: 'Offers Count=' | append: settings.gwp_offers.count | append: log_delimiter
    endif

    # loop offer metaobjects in order specified by theme settings
    for offer in settings.gwp_offers
        capture offer_result
            render 'return-gwp-offer-eval', offer: offer, collect_logs: collect_logs, soft_cart_threshold: soft_cart_threshold, index: forloop.index0
        endcapture
        assign result_split = offer_result | split: result_delimiter
        assign offer_type = result_split[0]
        assign offer_handle = result_split[1]
        if offer_type == not_found_result or offer_handle == not_found_result
            if collect_logs
                assign offer_logs = result_split[2]
                assign log_lines = log_lines | append: offer_logs
            endif
            continue
        endif
        # add the result to the list if valid
        assign results = results | append: offer_result | append: list_delimiter
    endfor

    # clean up null results
    assign results = results | split: list_delimiter | compact | uniq | join: list_delimiter

    # return result to caller
    echo results
-%}
