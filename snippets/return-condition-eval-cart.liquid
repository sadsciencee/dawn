{%- liquid
    # evaluate a cart threshold condition

    # params:
    #   condition (offer_condition_cart_threshold)
    #   soft_cart_threshold (boolean, default false)
    #   collect_logs (boolean, optional)

    # returns string (boolean::log_lines)

    # consts
    assign result_delimiter = '::'
    assign log_delimiter = '___LOG___'

    # set params
    assign collect_logs = collect_logs | default: false
    assign soft_cart_threshold = soft_cart_threshold | default: false

    # convert condition money values to integers
    assign minimum_cart_value = condition.minimum_cart_value.value | plus: 0
    assign maximum_cart_value = condition.maximum_cart_value.value | plus: 0

    assign cart_value = cart.total_price
    assign log_line = 'condition.minimum_cart_value=' | append: minimum_cart_value | append: ',cart_value=' | append: cart_value | append: ',condition.maximum_cart_value=' | append: maximum_cart_value
    assign result = 'false'
    if cart_value < minimum_cart_value
        # we always need to check minimum value
        assign log_line = log_line | append: ',cart_value < minimum_cart_value'
        if soft_cart_threshold
            # soft_cart_threshold evals determine if the offer could be displayed to the customr
            # for example "spend $60 to get this offer"
            assign result = 'true'
        else
            # if soft_cart_threshold isn't specified, act normally and evaluate to false
            assign result = 'false'
        endif
    elsif maximum_cart_value == 0
        # if maximum value is empty, we don't need to check it, evaluate to true
        assign log_line = log_line | append: ',minimum_cart_value < cart_value=true,maximum_cart_value=empty'
        assign result = 'true'
    elsif maximum_cart_value >= cart_value
        # cart value is within min/max range. we still want to follow this rule if it's a soft_cart_threshold eval since we won't show offers for lower cart values
        assign log_line = log_line | append: ',minimum_cart_value < cart_value=true,maximum_cart_value GTE cart_value=true'
        assign result = 'true'
    else
        # cart value exceeds maximum value
        assign log_line = log_line | append: ',minimum_cart_value < cart_value=true,maximum_cart_value GTE cart_value=false'
        assign result = 'false'
    endif

    # return result to caller
    if collect_logs
        assign log_line = 'Condition "' | append: condition.label.value | append: '" evaluated to "' | append: result | append: '" ' | append: log_delimiter | append: log_line
        echo result | append: result_delimiter | append: log_line
    else
        echo result
    endif
-%}
