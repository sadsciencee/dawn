{% liquid
    # output a json object with instructions to potentially update the cart. should be retrieved via section api

    # params and defaults
    assign result_delimiter = '::'
    assign list_delimiter = ':::'
    assign update_required = false
    assign line_id_type = 'key'
    assign line_updates = ''

    # TODO: bundle logic here. bundle logic could potentially change line_id_type

    # add any invalid gwp offers to the update list
    capture gwp_offers_to_remove
        render 'return-gwp-offers-to-remove', line_id_type: line_id_type
    endcapture
    assign line_updates = line_updates | append: gwp_offers_to_remove

    # now that we have both the gwp removal and potential bundle updates, we can split the list
    assign line_updates = line_updates | split: list_delimiter

    # format line updates so they will be a valid json object to pass into cart ajax api
    assign line_updates_json = ""
    for line in line_updates
        assign line_split = line | split: result_delimiter
        assign line_id = line_split[0]
        assign line_quantity = line_split[1]
        if line_id_type == 'key'
            assign line_id = '"' | append: line_id | append:'"'
        endif
        assign line_json = line_id | append: ':' | append: line_quantity
        unless forloop.last
            assign line_json = line_json | append: ','
        endunless
        assign line_updates_json = line_updates_json | append: line_json
    endfor

    if line_updates.size > 0
        assign update_required = true
    endif


    assign json = '{'
    assign json = json | append: '"updates": {' | append: line_updates_json | append: '},'
    assign json = json | append: '"update_required": ' | append: update_required

    assign json = json | append: '}'
%}
<script type="application/json" data-cart-update-instructions>{{- json -}}</script>
